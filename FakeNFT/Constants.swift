import Foundation

enum Constants {
    
    struct Cart {
        static let nftImageHeight: CGFloat = 108
        static let radius: CGFloat = 12
        static let ratingImageWidth: CGFloat = 68
        static let rowHeight: CGFloat = 140
        
        static let back = "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        static let byPrice = "–ü–æ —Ü–µ–Ω–µ"
        static let byRating = "–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É"
        static let byTitle = "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
        static let cancelText = "–û—Ç–º–µ–Ω–∏—Ç—å"
        static let cartReuseIdentifier = "cart"
        static let closeText = "–ó–∞–∫—Ä—ã—Ç—å"
        static let currency = "ETH"
        static let currencyReuseIdentifier = "currency"
        static let emptyCartText = "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        static let errorAlertTitle = "–û—à–∏–±–∫–∞"
        static let nftText = "NFT"
        static let ok = "OK"
        static let pay = "–û–ø–ª–∞—Ç–∏—Ç—å"
        static let payment = "–ö –æ–ø–ª–∞—Ç–µ"
        static let priceText = "–¶–µ–Ω–∞"
        static let remove = "–£–¥–∞–ª–∏—Ç—å"
        static let removeFromCart = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?"
        static let retryText = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
        static let selectCurrencyForPayment = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üòá"
        static let selectTypeOfPayment = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
        static let sortText = "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
        static let unselectedPaymentMethod = "–ù–µ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
        static let userAgreementText = "–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏"
        static let userAgreementLinkText = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"
        static let userAgreementURL = "https://yandex.ru/legal/practicum_termsofuse/"
    }
    
    struct GeometricParams {
        let cellCount: Int
        let leftInset: CGFloat
        let rightInset: CGFloat
        let cellSpacing: CGFloat
        let paddingWidth: CGFloat
        
        init(cellCount: Int,
             leftInset: CGFloat,
             rightInset: CGFloat,
             cellSpacing: CGFloat
        ) {
            self.cellCount = cellCount
            self.leftInset = leftInset
            self.rightInset = rightInset
            self.cellSpacing = cellSpacing
            self.paddingWidth = leftInset + rightInset + CGFloat(cellCount - 1) * cellSpacing
        }
    }
}
